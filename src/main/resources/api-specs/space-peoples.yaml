openapi: 3.0.2
info:
  title: space-peoples
  version: 1.0.0
  contact:
    name: Thomas Neeb
    email: thomas.neeb@nttdata.com
paths:
  /registration:
    post:
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '200':
          description: Returns the new generated client credentials
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBody'
  /token:
    post:
      operationId: token
      responses:
        '200':
          description: Returns the access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBody'
  /my:
    get:
      operationId: retrieveAccount
      responses:
        '200':
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Agent'
           description: Returns the agent info for the logged in user
  /my/planets:
    get:
      operationId: retrieveMyPlanets
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Planet'
          description: Returns the list of all owned planets
  /my/planets/{planetId}:
    parameters:
      -
        name: planetId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: retrieveMyPlanetDetails
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanetDetails'
          description: Returns the detailed information of one own planet
  /my/planets/{planetId}/buildings:
    parameters:
      -
        name: planetId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: retrievePlanetBuildings
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
          description: Returns all buildings on this planet
    post:
      operationId: createBuilding
      requestBody:
        content:
          application/json:
            schema:
              properties:
                buildingType:
                  $ref: '#/components/schemas/BuildingType'
      responses:
        '200':
          description: Triggered creation of a new building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
  /my/planets/{planetId}/buildings/{buildingType}:
    parameters:
      -
        name: planetId
        in: path
        required: true
        schema:
          type: string
      -
        name: buildingType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BuildingType'
    get:
      operationId: retrieveBuilding
      responses:
        '200':
          description: Returns the requested building on that planet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
    post:
      operationId: levelUpBuilding
      responses:
        '200':
          description: Level up confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '409':
          description: Building yard is still busy
    delete:
      operationId: cancelBuildingRequest
      responses:
        '200':
          description: canceled building request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: no building request found to be cancelled
  /my/planets/{planetId}/resources:
    parameters:
      -
        name: planetId
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrieveResources
      responses:
        '200':
          description: Returns the resources on this planet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
  /my/planets/{planetId}/resources/{resourceType}:
    parameters:
      -
        name: planetId
        in: path
        schema:
          type: string
        required: true
      -
        name: resourceType
        in: path
        schema:
          $ref: '#/components/schemas/ResourceType'
        required: true
    delete:
      operationId: discardResources
      parameters:
        -
          name: units
          in: query
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
      responses:
        '200':
          description: Resources successfully dropped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLevel'
        '406':
          description: To few resources to discard
  /my/planets/{planetId}/recyclables:
    parameters:
      -
        name: planetId
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrieveRecyclables
      responses:
        '200':
          description: Returns the recyclable resources on this planet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
  /my/planets/{planetId}/recyclables/{resourceType}:
    parameters:
      -
        name: planetId
        in: path
        schema:
          type: string
        required: true
      -
        name: resourceType
        in: path
        schema:
          $ref: '#/components/schemas/ResourceType'
        required: true
    delete:
      operationId: discardRecyclables
      parameters:
        -
          name: units
          in: query
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
      responses:
        '200':
          description: Returns the new level of this recyclable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLevel'
  /my/planets/{planetId}/capacities:
    parameters:
      -
        name: planetId
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrievePlanetCapacities
      responses:
        '200':
          description: Returns the capacities of the specified planet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CapacityLevel'
  /my/ships:
    get:
      operationId: retrieveShips
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ship'
          description: Returns all owned ships
    post:
      operationId: createShip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ship'
      responses:
        '201':
          description: creation of ship triggered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ship'
  /my/fleets:
    post:
      operationId: createFleet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fleet'
      responses:
        '200':
          description: Fleet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
    get:
      operationId: retrieveFleets
      responses:
        '200':
          description: Returns all owned fleets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fleet'
  /my/fleets/{nickname}:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrieveFleet
      responses:
        '200':
          description: Returns details about the fleet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
    patch:
      operationId: renameFleet
      requestBody: 
        content: 
          application/json:
            schema: 
              properties: 
                nickname:
                  $ref: '#/components/schemas/Nickname'
      responses: 
        '200':
          description: sucessful renamed fleet
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/Fleet'
  /my/fleets/{nickname}/fuel:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrieveFleetFuel
      responses:
        '200':
          description: Returns fuel details for the fleet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
    post:
      operationId: refuelFleet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FuelLevel'
      responses:
        '200':
          description: Fuel status of the fleet
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
  /my/fleets/{nickname}/orbit:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
    post:
      operationId: fleetToOrbit
      responses:
        '200':
          description: Fleet is sent to the orbit
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/Fleet'
  /my/fleets/{nickname}/port:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
    post:
      operationId: fleetToPort
      responses:
        '200':
          description: Fleet is sent to the port
          content:
            applcation/json:
              schema:
                $ref: '#/components/schemas/Fleet'
  /my/fleets/{nickname}/resources:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrieveFleetResources
      responses:
        '200':
          description: Returns all resources in the fleet
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
    post:
      operationId: setResourcesInFleet
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ResourceLevel'
      responses:
        '200':
          description: Resources in fleet
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
  /my/fleets/{nickname}/recyclables:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
    get:
      operationId: retrieveFleetRecyclables
      responses:
        '200':
          description: Returns all recyclables in the fleet
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceLevel'
  /my/fleets/{nickname}/destinations/{planetId}:
    parameters:
      -
        name: nickname
        in: path
        schema:
          type: string
        required: true
      -
        name: planetId
        in: path
        schema:
          type: string
        required: true
    post:
      operationId: flyToDesination
      requestBody:
        content:
          application/json:
            schema:
              properties:
                camouflaged:
                  type: boolean
      responses:
        '200':
          description: Returns information obout the flight
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fleet'
    get:
      operationId: retrieveFlightInfomation
      responses:
        '200':
          description: Returns information for the flight to the assigned destination
          content:
            applcation/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fleet'
  /my/researchs:
    get:
      operationId: retrieveResearchLevels
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResearchLevel'
          description: Returns the actual research level of all ship components
    post:
      operationId: startShipPartResearch
      requestBody:
        content:
          application/json:
            schema:
              properties:
                planetId:
                  type: string
                shipPart:
                  $ref: '#/components/schemas/ResearchType'
      responses:
        '200':
          description: Research command accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResearchLevel'
  /my/researchs/{researchType}:
    parameters:
      -
        name: researchType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResearchType'
    post:
      operationId: levelUpShipPartResearch
      requestBody:
        content:
          application/json:
            schema:
              properties:
                planetId:
                  type: string
      responses:
        '200':
          description: Research command accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResearchLevel'
  /my/ship-types:
    get:
      operationId: retrieveShipTypes
      responses:
        '200':
          description: retrieve all ship types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShipType'
    post:
      operationId: createShipType
      requestBody:
        content:
          application/json:
            schema:
              properties:
                planetId:
                  type: string
                shipType:
                  $ref: '#/components/schemas/ShipType'
      responses:
        '200':
          description: creates a new ship type with the given components
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipType'
  /my/ship-types/preview:
    post:
      operationId: calculateShipType
      requestBody:
        content:
          application/json:
            schema:
              properties:
                planetId:
                  type: string
                shipType:
                  $ref: '#/components/schemas/ShipType'
      responses:
        '200':
          description: creates a new ship type with the given components
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipType'
  /galaxies:
    get:
      operationId: retrieveGalaxies
      responses:
        '200':
          description: List all galaxies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Galaxy'
  /galaxies/{universeName}/planets:
    get:
      operationId: retrievePlanets
      responses:
        '200':
          description: List all planets of this galaxy
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Planet'
    parameters:
      -
        name: universeName
        in: path
        schema:
          type: string
        required: true
  /building-types:
    get:
      operationId: retrieveBuildingTypes
      responses:
        '200':
          description: Returns all available building types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BuildingType'
  /admin/galaxies:
    post:
      operationId: createGalaxy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Galaxy'
      responses:
        '201':
          description: Generation process started
components:
  schemas:
    Galaxy:
      required:
        - nickname
      properties:
        nickname:
          $ref: '#/components/schemas/Nickname'
    RegistrationRequest:
      required:
        - nickname
        - password
      properties:
        nickname:
          $ref: '#/components/schemas/Nickname'
        password:
          type: string
        email:
          type: string
    TokenBody:
      required:
        - access_token
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires:
          type: integer
        token:
          type: string
        scope:
          type: string
    Agent:
      required:
        - nickname
      properties:
        nickname:
          $ref: '#/components/schemas/Nickname'
    Nickname:
      type: string
      minLength: 4
      maxLength: 80
    PlanetDetails:
      required:
        - planet
        - buildings
        - resources
        - capacities
      properties:
        planet:
          $ref: '#/components/schemas/Planet'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/Building'
        capacities:
          type: array
          items:
            $ref: '#/components/schemas/CapacityLevel'
    Planet:
      required:
        - id
        - coordinates
        - nickname
      properties:
        id:
          type: string
        coordinates:
          $ref: '#/components/schemas/GalacticPosition'
        planetName:
          $ref: '#/components/schemas/Nickname'
        galaxyName:
          $ref: '#/components/schemas/Nickname'
    GalacticPosition:
      required:
        - x
        - y
        - z
        - orbit
      properties:
        x:
          type: integer
          minimum: 1
          maximum: 9
        y:
          type: integer
          minimum: 1
          maximum: 9
        z:
          type: integer
          minimum: 1
          maximum: 9
        orbit:
          type: string
          minLength: 1
          maxLength: 1
    Building:
      properties:
        buildingType:
          $ref: '#/components/schemas/BuildingType'
        level:
          type: integer
        nextLevelUpdate:
          type: string
          format: date-time
    ResourceLevel:
      required:
        - resourceType
        - units
      properties:
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        units:
          type: integer
          format: int64
    Fleet:
      properties:
        nickname:
          $ref: '#/components/schemas/Nickname'
        planetId:
          type: string
        arivialTime:
          type: string
          format: date-time
        shipTypeCounts:
          type: array
          items:
            $ref: '#/components/schemas/ShipTypeCount'
        status:
          type: string
        cargo:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        recycling:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        fuel:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/CharacteristicValue'
    ShipTypeCount:
      properties:
        shipType:
          $ref: '#/components/schemas/Nickname'
        count:
          type: integer
          format: int64
    Ship:
      properties:
        shipType:
          $ref: '#/components/schemas/Nickname'
        planetId:
          type: string
        fleetName:
          $ref: '#/components/schemas/Nickname'
        ready:
          type: string
          format: date-time
    ShipType:
      required:
        - nickname
        - manned
        - equipments
      properties:
        nickname:
          $ref: '#/components/schemas/Nickname'
        manned:
          type: boolean
        equipments:
          type: array
          items:
            $ref: '#/components/schemas/ShipPartLevel'
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/CharacteristicValue'
        buildingCosts:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        buildingTimeInSeconds:
          type: integer
          format: int64
        researchCosts:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        fuelConsumptions:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
        researchTimeInSeconds:
          type: integer
          format: int64
        ready:
          type: string
          format: date-time
    ShipPartLevel:
      required:
        - researchType
      properties:
        researchType:
          $ref: '#/components/schemas/ResearchType'
        level:
          type: integer
    CharacteristicValue:
      required:
        - characteristic
        - value
      properties:
        characteristic:
          $ref: '#/components/schemas/Characteristic'
        value:
          type: integer
          format: int64
    FuelLevel:
      properties:
        percentage:
          type: integer
        absolut:
          type: array
          items:
            $ref: '#/components/schemas/ResourceLevel'
    ResearchLevel:
      properties:
        researchType:
          $ref: '#/components/schemas/ResearchType'
        level:
          type: integer
        planetId:
          type: string
        nextLevelUpdate:
          type: string
          format: date-time
    CapacityLevel:
      properties:
        capacityType:
          $ref: '#/components/schemas/CapacityType'
        maxUnits:
          type: integer
          format: int64
        actualUnits:
          type: integer
          format: int64
    CapacityType:
      type: string
      enum:
        - STORAGE
        - ENERGY
        - RECYCLE
        - RESIDENT
    BuildingType:
      type: string
      enum:
        - BUILDING_YARD
        - SPACEPORT
        - RESIDENTIAL_BUILDING
        - SOLAR_PARK
        - IRON_MINE
        - CARBON_MINE
        - SILICON_MINE
        - FOUNTAIN
        - ELECTROLYSIS_PLANT
        - WAREHOUSE
        - RECYCLING_FACILITY
        - SPACESHIP_FACTORY
        - WEAPON_FACTORY
        - RESEARCH_FACILITY
    ResearchType:
      type: string
      enum:
        - BASIC_UNIT
        - CARGO_MODULE
        - FUEL_TANK
        - SHIELD
        - ARMOUR
        - COMBUSTION_DRIVE
        - FUSION_DRIVE
        - TIME_WARP_DRIVE
        - ROCKET
        - LASER
        - PLASMA
        - SPY_UNIT
        - CAMOUFLAGE_UNIT
        - COLONISATION_UNIT
        - INVASION_UNIT
        - RECYCLING_UNIT
        - BOUNTY_UNIT
        - SABOTAGE_UNIT
        - MINERAL_PROCESSOR
    ResourceType:
      type: string
      enum:
        - SILICON
        - IRON
        - CARBON
        - WATER
        - HYDROGEN
        - OXYGEN
        - SAND
        - DIAMONDS
        - SILVER
        - GOLD
    Characteristic:
      type: string
      enum:
        - STABILITY
        - ACCELERATION
        - WARP
        - FUEL
        - CARGO
        - ATTACK
        - DEFENSE